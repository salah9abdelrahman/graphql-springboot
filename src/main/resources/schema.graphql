# GraphQL does not have a built-in format for date-time fields
# ! means that this filed can't have null values

union TaskOrApproach = Task | Approach

enum ApproachDetailCategory {
    NOTE
    EXPLANATION
    WARNING
}


interface SearchResultItem {
    id: ID!
    content: String!
}

type User {
    id: ID!
    createdAt: String!
    username: String!
    name: String
    taskList: [Task!]!
}

type Task implements SearchResultItem {
    id: ID!
    content: String!
    approachCount: Int!
    author: User!
    approachList: [Approach!]!
    tags: [String!]!
}

type Approach implements SearchResultItem {
    id: ID!
    content: String!
    createdAt: String!
    task: Task!
    voteCount: Int!
    author: User!
    detailList: [ApproachDetail!]!
}


type Query {
    taskMainList: [Task!]

    search(term: String!) : [SearchResultItem!]

    taskInfo(id: ID!): Task

    me: User
}

type ApproachDetail {
    content: String!
    category: ApproachDetailCategory!
}


#### Mutations
type Mutation {
    userCreate(input: UserInput!): UserPayload!
    userDelete: UserDeletePayload!
    taskCreate(input: TaskInput!): TaskPayload!
}

type UserError {
    message: String!
}

type UserPayload {
    errors: [UserError!]!
    user: User
    authToken: String
}

input UserInput {
    username: String!
    password: String!
    firstName: String
    lastName: String
}

input AuthInput {
    username: String!
    password: String!
}

type UserDeletePayload {
    errors: [UserError!]!
    deletedUserId: ID
}

input TaskInput {
    content: String!
    tags: [String!]!
    isPrivate: Boolean!
}

type TaskPayload {
    errors: [UserError!]!
    task: Task
}

input ApproachDetailInput {
    content: String!
    category: ApproachDetailCategory!
}

input ApproachInput {
    content: String!
    detailList: [ApproachDetailInput!]!
}

input ApproachVoteInput {
    """true for up-vote and false for down-vote"""
    up: Boolean!
}

type ApproachPayload {
    errors: [UserError!]!
    approach: Approach
}


#### Subscriptions
type Subscription {
    voteChanged(taskId: ID!): Approach!
    taskMainListChanged: [Task!]
}
